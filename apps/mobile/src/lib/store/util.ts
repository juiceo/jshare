import { v4 as uuid } from 'uuid';

export type AutoGeneratedProps = {
    id: string;
    archived: boolean;
    archivedAt: Date | null;
    createdAt: Date;
    updatedAt: Date;
};

export const getAutoGeneratedProps = (): AutoGeneratedProps => {
    return {
        id: uuid(),
        archived: false,
        archivedAt: null,
        createdAt: new Date(),
        updatedAt: new Date(),
    };
};

export const withRetry = <T>(fn: () => Promise<T>, retries = 3): Promise<T> => {
    return fn().catch((err) => {
        if (retries > 0) {
            return withRetry(fn, retries - 1);
        }
        throw err;
    });
};

/**
 * Returns a hot-reloadable instance of a value. This value is cached in globalThis,
 * so it is persisted across hot-reloads while in Development mode.
 *
 * @param key A unique key for the value
 * @param value A function that returns the value
 * @returns The value
 */
export const hotReloadable = <T>(key: string, value: () => T): T => {
    if (__DEV__) {
        if (!(globalThis as any)[key]) {
            (globalThis as any)[key] = value();
        }

        return (globalThis as any)[key];
    } else {
        return value();
    }
};
