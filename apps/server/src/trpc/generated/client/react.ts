/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { createTRPCReact as _createTRPCReact, type CreateTRPCReact } from '@trpc/react-query';
import type { CreateTRPCReactOptions } from '@trpc/react-query/shared';
import type { AnyTRPCRouter as AnyRouter } from '@trpc/server';

import { ClientType as ExchangeRatesClientType } from './ExchangeRates.react.type';
import { ClientType as ExpenseClientType } from './Expense.react.type';
import { ClientType as ExpenseShareClientType } from './ExpenseShare.react.type';
import { ClientType as GroupClientType } from './Group.react.type';
import { ClientType as GroupParticipantClientType } from './GroupParticipant.react.type';
import { ClientType as ImageClientType } from './Image.react.type';
import { ClientType as MessageClientType } from './Message.react.type';
import { ClientType as MessageAttachmentClientType } from './MessageAttachment.react.type';
import { ClientType as PaymentClientType } from './Payment.react.type';
import { ClientType as ProfileClientType } from './Profile.react.type';
import type { DeepOverrideAtPath } from './utils';

export function createTRPCReact<
    TRouter extends AnyRouter,
    TPath extends string | undefined = undefined,
    TSSRContext = unknown,
>(opts?: CreateTRPCReactOptions<TRouter>) {
    const r: CreateTRPCReact<TRouter, TSSRContext> = _createTRPCReact<TRouter, TSSRContext>(opts);
    return r as DeepOverrideAtPath<
        CreateTRPCReact<TRouter, TSSRContext>,
        ClientType<TRouter>,
        TPath
    >;
}

export interface ClientType<AppRouter extends AnyRouter> {
    profile: ProfileClientType<AppRouter>;
    group: GroupClientType<AppRouter>;
    groupParticipant: GroupParticipantClientType<AppRouter>;
    image: ImageClientType<AppRouter>;
    message: MessageClientType<AppRouter>;
    messageAttachment: MessageAttachmentClientType<AppRouter>;
    expense: ExpenseClientType<AppRouter>;
    expenseShare: ExpenseShareClientType<AppRouter>;
    payment: PaymentClientType<AppRouter>;
    exchangeRates: ExchangeRatesClientType<AppRouter>;
}
