model Profile {
    userId        String             @id()
    email         String
    firstName     String
    lastName      String
    currency      String             @db.VarChar(3)
    groups        GroupParticipant[]
    avatarId      String?
    avatar        Image?             @relation(fields: [avatarId], references: [id])
    messages      Message[]
    expensesOwned Expense[]          @relation("expense_owner")
    expensesPaid  Expense[]          @relation("expense_payer")
    expenseShares ExpenseShare[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("profiles")
    @@schema("public")
}

model Group {
    id           String             @id @default(uuid())
    name         String
    currency     String             @db.VarChar(3)
    participants GroupParticipant[]
    coverImageId String?
    coverImage   Image?             @relation(fields: [coverImageId], references: [id])
    messages     Message[]
    expenses     Expense[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("groups")
    @@schema("public")
}

model GroupParticipant {
    id      String  @id @default(uuid())
    userId  String
    user    Profile @relation(fields: [userId], references: [userId])
    groupId String
    group   Group   @relation(fields: [groupId], references: [id])
    role    Role

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@index([groupId])
    @@index([userId])
    @@map("group_participants")
    @@schema("public")
}

model Image {
    id           String  @id @default(uuid())
    path         String
    bucket       String
    uploadedById String
    blurhash     String?

    Group   Group[]
    Profile Profile[]

    updatedAt DateTime @default(now()) @updatedAt
    createdAt DateTime @default(now())

    @@map("images")
    @@schema("public")
}

model Message {
    id   String  @id @default(uuid())
    key  String
    text String?

    authorType AuthorType
    authorId   String?
    author     Profile?   @relation(fields: [authorId], references: [userId])

    groupId String
    group   Group  @relation(fields: [groupId], references: [id])

    attachments MessageAttachment[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("messages")
    @@schema("public")
}

model MessageAttachment {
    id        String  @id @default(uuid())
    messageId String
    message   Message @relation(fields: [messageId], references: [id])

    type      MessageAttachmentType
    expenseId String?
    expense   Expense?              @relation(fields: [expenseId], references: [id])

    @@schema("public")
}

model Expense {
    id String @id @default(uuid())

    ownerId String
    owner   Profile @relation(name: "expense_owner", fields: [ownerId], references: [userId])

    payerId String
    payer   Profile @relation(name: "expense_payer", fields: [payerId], references: [userId])

    groupId String
    group   Group  @relation(fields: [groupId], references: [id])

    amount      Int
    currency    String  @db.VarChar(3)
    description String?

    conversion Json?

    shares             ExpenseShare[]
    messageAttachments MessageAttachment[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("expenses")
    @@schema("public")
}

model ExpenseShare {
    id String @id @default(uuid())

    userId String
    user   Profile @relation(fields: [userId], references: [userId])

    expenseId String
    expense   Expense @relation(fields: [expenseId], references: [id])

    amount   Int
    currency String  @db.VarChar(3)
    locked   Boolean @default(false)

    conversion Json?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("expense_shares")
    @@schema("public")
}

model ExchangeRates {
    id           String @id @default(uuid())
    baseCurrency String @db.VarChar(3)
    rates        Json

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("exchange_rates")
    @@schema("public")
}

enum Role {
    Owner
    Admin
    Member

    @@schema("public")
}

enum AuthorType {
    User
    System

    @@schema("public")
}

enum MessageAttachmentType {
    Expense

    @@schema("public")
}
