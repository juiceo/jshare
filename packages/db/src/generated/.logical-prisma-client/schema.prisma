//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

generator client {
  provider        = "prisma-client-js"
  output          = "src/generated/.logical-prisma-client"
  previewFeatures = ["multiSchema"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

enum Role {
  Owner
  Admin
  Member

  @@schema("public")
}

enum AuthorType {
  User
  System

  @@schema("public")
}

enum MessageAttachmentType {
  Expense

  @@schema("public")
}

enum InviteType {
  Code
  Invite

  @@schema("public")
}

enum CurrencyCode {
  AED
  ARS
  AUD
  BRL
  CAD
  CHF
  CLP
  COP
  CZK
  DKK
  EGP
  EUR
  GBP
  HUF
  INR
  KES
  MAD
  MXN
  NOK
  PEN
  PLN
  RON
  SEK
  THB
  TZS
  USD
  ZAR
  KZT
  KGS

  @@schema("public")
}

/// @@allow('all', true)
/// @@auth
model Profile {
  id               String             @id() @default(uuid())
  archived         Boolean            @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt()
  email            String
  firstName        String
  lastName         String
  lastActivity     DateTime           @default(now())
  currency         CurrencyCode
  groups           GroupParticipant[]
  avatarId         String?
  avatar           Image?             @relation(fields: [avatarId], references: [id])
  temporary        Boolean?
  termsAcceptedAt  DateTime?
  messages         Message[]
  expensesOwned    Expense[]          @relation("expense_owner")
  expensesPaid     Expense[]          @relation("expense_payer")
  expenseShares    ExpenseShare[]
  paymentsReceived Payment[]          @relation(name: "payment_recipient")
  paymentsPaid     Payment[]          @relation(name: "payment_payer")
  showInSearch     Boolean            @default(true)

  @@map("profiles")
  @@schema("public")
}

/// @@allow('all', true)
model Group {
  id           String             @id() @default(uuid())
  archived     Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now()) @updatedAt()
  name         String
  currency     CurrencyCode
  participants GroupParticipant[]
  coverImageId String?
  coverImage   Image?             @relation(fields: [coverImageId], references: [id])
  inviteCode   String?            @unique()
  messages     Message[]
  expenses     Expense[]
  payments     Payment[]
  lastActivity DateTime           @default(now())

  @@map("groups")
  @@schema("public")
}

/// @@allow('all', true)
model GroupParticipant {
  id          String      @id() @default(uuid())
  archived    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt()
  userId      String
  user        Profile     @relation(fields: [userId], references: [id])
  groupId     String
  group       Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  role        Role
  invitedById String?
  inviteType  InviteType?

  @@index([groupId])
  @@index([userId])
  @@map("group_participants")
  @@schema("public")
}

/// @@allow('all', true)
model Image {
  id           String    @id() @default(uuid())
  archived     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt()
  path         String
  bucket       String
  uploadedById String
  blurhash     String?
  Group        Group[]
  Profile      Profile[]

  @@map("images")
  @@schema("public")
}

/// @@allow('all', true)
model Message {
  id          String              @id() @default(uuid())
  archived    Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @default(now()) @updatedAt()
  key         String
  text        String?
  authorType  AuthorType
  authorId    String?
  author      Profile?            @relation(fields: [authorId], references: [id])
  groupId     String
  group       Group               @relation(fields: [groupId], references: [id], onDelete: Cascade)
  attachments MessageAttachment[]

  @@map("messages")
  @@schema("public")
}

/// @@allow('all', true)
model MessageAttachment {
  id        String                @id() @default(uuid())
  archived  Boolean               @default(false)
  createdAt DateTime              @default(now())
  updatedAt DateTime              @default(now()) @updatedAt()
  messageId String
  message   Message               @relation(fields: [messageId], references: [id], onDelete: Cascade)
  type      MessageAttachmentType
  expenseId String?
  expense   Expense?              @relation(fields: [expenseId], references: [id], onDelete: SetNull)

  @@map("message_attachments")
  @@schema("public")
}

/// @@allow('all', true)
model Expense {
  id                 String              @id() @default(uuid())
  archived           Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt()
  ownerId            String
  owner              Profile             @relation(name: "expense_owner", fields: [ownerId], references: [id])
  payerId            String
  payer              Profile             @relation(name: "expense_payer", fields: [payerId], references: [id])
  groupId            String
  group              Group               @relation(fields: [groupId], references: [id], onDelete: Cascade)
  amount             Int
  currency           CurrencyCode
  description        String?
  /// @json
  conversion         Json?
  shares             ExpenseShare[]
  messageAttachments MessageAttachment[]

  @@map("expenses")
  @@schema("public")
}

/// @@allow('all', true)
model ExpenseShare {
  id         String       @id() @default(uuid())
  archived   Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt()
  userId     String
  user       Profile      @relation(fields: [userId], references: [id])
  expenseId  String
  expense    Expense      @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  amount     Int
  currency   CurrencyCode
  locked     Boolean      @default(false)
  /// @json
  conversion Json?

  @@map("expense_shares")
  @@schema("public")
}

/// @@allow('all', true)
model Payment {
  id          String       @id() @default(uuid())
  archived    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt()
  groupId     String
  group       Group        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  amount      Int
  currency    CurrencyCode
  /// @json
  conversion  Json?
  recipientId String
  recipient   Profile      @relation(name: "payment_recipient", fields: [recipientId], references: [id])
  payerId     String
  payer       Profile      @relation(name: "payment_payer", fields: [payerId], references: [id])

  @@map("payments")
  @@schema("public")
}

/// @@allow('all', true)
model ExchangeRates {
  id           String   @id() @default(uuid())
  archived     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt()
  baseCurrency String   @db.VarChar(3)
  rates        Json

  @@map("exchange_rates")
  @@schema("public")
}
