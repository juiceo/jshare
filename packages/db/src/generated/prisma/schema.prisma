//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["multiSchema"]
}

enum Role {
  Owner
  Admin
  Member

  @@schema("public")
}

enum AuthorType {
  User
  System

  @@schema("public")
}

enum MessageAttachmentType {
  Expense

  @@schema("public")
}

enum CurrencyCode {
  AED
  ARS
  AUD
  BRL
  CAD
  CHF
  CLP
  COP
  CZK
  DKK
  EGP
  EUR
  GBP
  HUF
  INR
  KES
  MAD
  MXN
  NOK
  PEN
  PLN
  RON
  SEK
  THB
  TZS
  USD
  ZAR

  @@schema("public")
}

model Profile {
  userId           String             @id()
  email            String
  firstName        String
  lastName         String
  currency         CurrencyCode
  groups           GroupParticipant[]
  avatarId         String?
  avatar           Image?             @relation(fields: [avatarId], references: [id])
  messages         Message[]
  expensesOwned    Expense[]          @relation("expense_owner")
  expensesPaid     Expense[]          @relation("expense_payer")
  expenseShares    ExpenseShare[]
  paymentsReceived Payment[]          @relation(name: "payment_recipient")
  paymentsPaid     Payment[]          @relation(name: "payment_payer")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt()

  @@map("profiles")
  @@schema("public")
}

model Group {
  id           String             @id() @default(uuid())
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now()) @updatedAt()
  name         String
  currency     CurrencyCode
  participants GroupParticipant[]
  coverImageId String?
  coverImage   Image?             @relation(fields: [coverImageId], references: [id])
  messages     Message[]
  expenses     Expense[]
  payments     Payment[]

  @@map("groups")
  @@schema("public")
}

model GroupParticipant {
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  userId    String
  user      Profile  @relation(fields: [userId], references: [userId])
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id])
  role      Role

  @@index([groupId])
  @@index([userId])
  @@map("group_participants")
  @@schema("public")
}

model Image {
  id           String    @id() @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt()
  path         String
  bucket       String
  uploadedById String
  blurhash     String?
  Group        Group[]
  Profile      Profile[]

  @@map("images")
  @@schema("public")
}

model Message {
  id          String              @id() @default(uuid())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @default(now()) @updatedAt()
  key         String
  text        String?
  authorType  AuthorType
  authorId    String?
  author      Profile?            @relation(fields: [authorId], references: [userId])
  groupId     String
  group       Group               @relation(fields: [groupId], references: [id])
  attachments MessageAttachment[]

  @@map("messages")
  @@schema("public")
}

model MessageAttachment {
  id        String                @id() @default(uuid())
  createdAt DateTime              @default(now())
  updatedAt DateTime              @default(now()) @updatedAt()
  messageId String
  message   Message               @relation(fields: [messageId], references: [id])
  type      MessageAttachmentType
  expenseId String?
  expense   Expense?              @relation(fields: [expenseId], references: [id])

  @@map("message_attachments")
  @@schema("public")
}

model Expense {
  id                 String              @id() @default(uuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt()
  ownerId            String
  owner              Profile             @relation(name: "expense_owner", fields: [ownerId], references: [userId])
  payerId            String
  payer              Profile             @relation(name: "expense_payer", fields: [payerId], references: [userId])
  groupId            String
  group              Group               @relation(fields: [groupId], references: [id])
  amount             Int
  currency           CurrencyCode
  description        String?
  conversion         Json?
  shares             ExpenseShare[]
  messageAttachments MessageAttachment[]

  @@map("expenses")
  @@schema("public")
}

model ExpenseShare {
  id         String       @id() @default(uuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt()
  userId     String
  user       Profile      @relation(fields: [userId], references: [userId])
  expenseId  String
  expense    Expense      @relation(fields: [expenseId], references: [id])
  amount     Int
  currency   CurrencyCode
  locked     Boolean      @default(false)
  conversion Json?

  @@map("expense_shares")
  @@schema("public")
}

model Payment {
  id          String       @id() @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt()
  groupId     String
  group       Group        @relation(fields: [groupId], references: [id])
  amount      Int
  currency    CurrencyCode
  conversion  Json?
  recipientId String
  recipient   Profile      @relation(name: "payment_recipient", fields: [recipientId], references: [userId])
  payerId     String
  payer       Profile      @relation(name: "payment_payer", fields: [payerId], references: [userId])

  @@map("payments")
  @@schema("public")
}

model ExchangeRates {
  id           String   @id() @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt()
  baseCurrency String   @db.VarChar(3)
  rates        Json

  @@map("exchange_rates")
  @@schema("public")
}
