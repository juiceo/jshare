import "schema.enums"
import "schema.types"
import "schema.base"

generator client {
    provider        = "prisma-client-js"
    output          = "../src/generated/prisma"
    previewFeatures = ["multiSchema"]
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}


datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
    schemas   = ["public"]
}

plugin prisma {
    provider = '@core/prisma'
    output = './prisma/schema.prisma'
    format = true
}

plugin zod {
    provider = '@core/zod'
}

plugin trpc {
    provider = '@zenstackhq/trpc'
    output = '../../apps/server/src/trpc/generated'
    generateClientHelpers = 'react'
    zodSchemasImport = "@jshare/db/zod"
    version = 'v11'
    importCreateRouter = "../../trpc"
    importProcedure = "../../trpc"
}

model Profile extends BaseModel {
    email            String
    firstName        String
    lastName         String
    lastActivity     DateTime           @default(now())
    currency         CurrencyCode
    groups           GroupParticipant[]
    avatarId         String?            @unique
    avatar           Image?             @relation(fields: [avatarId], references: [id])
    temporary        Boolean?
    termsAcceptedAt  DateTime?
    messages         Message[]
    expensesOwned    Expense[]          @relation("expense_owner")
    expensesPaid     Expense[]          @relation("expense_payer")
    expenseShares    ExpenseShare[]
    paymentsReceived Payment[]          @relation(name: "payment_recipient")
    paymentsPaid     Payment[]          @relation(name: "payment_payer")
    showInSearch     Boolean            @default(true)

    @@map("profiles")
    @@schema("public")
    @@auth
}

model Group extends BaseModel {
    name         String
    currency     CurrencyCode
    participants GroupParticipant[]
    coverImageId String?            @unique
    coverImage   Image?             @relation(fields: [coverImageId], references: [id])
    inviteCode   String?            @unique
    messages     Message[]
    expenses     Expense[]
    payments     Payment[]
    lastActivity DateTime           @default(now())

    @@map("groups")
}

model GroupParticipant extends BaseModel {
    userId      String
    user        Profile     @relation(fields: [userId], references: [id])
    groupId     String
    group       Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
    role        Role
    invitedById String?
    inviteType  InviteType?


    @@index([groupId])
    @@index([userId])
    @@map("group_participants")
}

model Image extends BaseModel {
    path         String
    bucket       String
    uploadedById String
    blurhash     String?

    Group        Group?
    Profile      Profile?

    /**
     * TODO: We should only allow fetching images with specific ID, not list all. Not sure how to achieve that.
     * 
     * The other alternative is to define complex access policy rules for whether the user is in the group, etc.
     */
    @@map("images")
}

model Message extends BaseModel {
    key         String
    text        String?

    authorType  AuthorType
    authorId    String?
    author      Profile?            @relation(fields: [authorId], references: [id])

    groupId     String
    group       Group               @relation(fields: [groupId], references: [id], onDelete: Cascade)

    attachments MessageAttachment[]

    @@map("messages")
}

model MessageAttachment extends BaseModel {
    messageId String
    message   Message               @relation(fields: [messageId], references: [id], onDelete: Cascade)
    type      MessageAttachmentType

    expenseId String?
    expense   Expense?              @relation(fields: [expenseId], references: [id], onDelete: SetNull)

    @@map("message_attachments")
}

model Expense extends BaseModel {
    ownerId            String
    owner              Profile             @relation(name: "expense_owner", fields: [ownerId], references: [id])

    payerId            String
    payer              Profile             @relation(name: "expense_payer", fields: [payerId], references: [id])

    groupId            String
    group              Group               @relation(fields: [groupId], references: [id], onDelete: Cascade)

    amount             Int
    currency           CurrencyCode
    description        String?
    conversion         CurrencyConversion? @json

    shares             ExpenseShare[]
    messageAttachments MessageAttachment[]

    @@map("expenses")
}

model ExpenseShare extends BaseModel {
    userId     String
    user       Profile             @relation(fields: [userId], references: [id])

    expenseId  String
    expense    Expense             @relation(fields: [expenseId], references: [id], onDelete: Cascade)

    amount     Int
    currency   CurrencyCode
    locked     Boolean             @default(false)
    conversion CurrencyConversion? @json

    @@map("expense_shares")
}

model Payment extends BaseModel {
    groupId     String
    group       Group               @relation(fields: [groupId], references: [id], onDelete: Cascade)

    amount      Int
    currency    CurrencyCode
    conversion  CurrencyConversion? @json

    recipientId String
    recipient   Profile             @relation(name: "payment_recipient", fields: [recipientId], references: [id])

    payerId     String
    payer       Profile             @relation(name: "payment_payer", fields: [payerId], references: [id])

    @@map("payments")
}

model ExchangeRates extends BaseModel {
    baseCurrency String @db.VarChar(3)
    rates        Json

    @@map("exchange_rates")
}