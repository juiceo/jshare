import "schema.enums"
import "schema.types"
import "schema.base"

generator client {
    provider        = "prisma-client-js"
    output          = "../src/generated/prisma"
    previewFeatures = ["multiSchema"]
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
    schemas   = ["public"]
}

plugin prisma {
    provider = '@core/prisma'
    output = './prisma/schema.prisma'
    format = true
}

plugin zod {
    provider = '@core/zod'
}

model Profile {
    userId           String             @id()
    email            String
    firstName        String
    lastName         String
    currency         CurrencyCode
    groups           GroupParticipant[]
    avatarId         String?
    avatar           Image?             @relation(fields: [avatarId], references: [id])
    messages         Message[]
    expensesOwned    Expense[]          @relation("expense_owner")
    expensesPaid     Expense[]          @relation("expense_payer")
    expenseShares    ExpenseShare[]
    paymentsReceived Payment[]          @relation(name: "payment_recipient")
    paymentsPaid     Payment[]          @relation(name: "payment_payer")

    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @default(now()) @updatedAt


    @@allow('all', true)
    @@map("profiles")
    @@schema("public")
    @@auth
}

model Group extends BaseModel {
    name         String
    currency     CurrencyCode
    participants GroupParticipant[]
    coverImageId String?
    coverImage   Image?             @relation(fields: [coverImageId], references: [id])
    inviteCode   String?            @unique
    messages     Message[]
    expenses     Expense[]
    payments     Payment[]

    @@allow('all', true)
    @@map("groups")
}

model GroupParticipant extends BaseModel {
    userId  String
    user    Profile @relation(fields: [userId], references: [userId])
    groupId String
    group   Group   @relation(fields: [groupId], references: [id])
    role    Role

    @@index([groupId])
    @@index([userId])
    @@allow('all', true)
    @@map("group_participants")
}

model Image extends BaseModel {
    path         String
    bucket       String
    uploadedById String
    blurhash     String?

    Group        Group[]
    Profile      Profile[]

    @@allow('all', true)
    @@map("images")
}

model Message extends BaseModel {
    key         String
    text        String?

    authorType  AuthorType
    authorId    String?
    author      Profile?            @relation(fields: [authorId], references: [userId])

    groupId     String
    group       Group               @relation(fields: [groupId], references: [id])

    attachments MessageAttachment[]

    @@allow('all', true)
    @@map("messages")
}

model MessageAttachment extends BaseModel {
    messageId String
    message   Message               @relation(fields: [messageId], references: [id])
    type      MessageAttachmentType

    expenseId String?
    expense   Expense?              @relation(fields: [expenseId], references: [id])

    @@allow('all', true)
    @@map("message_attachments")
}

model Expense extends BaseModel {
    ownerId            String
    owner              Profile             @relation(name: "expense_owner", fields: [ownerId], references: [userId])

    payerId            String
    payer              Profile             @relation(name: "expense_payer", fields: [payerId], references: [userId])

    groupId            String
    group              Group               @relation(fields: [groupId], references: [id])

    amount             Int
    currency           CurrencyCode
    description        String?
    conversion         CurrencyConversion? @json

    shares             ExpenseShare[]
    messageAttachments MessageAttachment[]

    @@allow('all', true)
    @@map("expenses")
}

model ExpenseShare extends BaseModel {
    userId     String
    user       Profile             @relation(fields: [userId], references: [userId])

    expenseId  String
    expense    Expense             @relation(fields: [expenseId], references: [id])

    amount     Int
    currency   CurrencyCode
    locked     Boolean             @default(false)
    conversion CurrencyConversion? @json

    @@allow('all', true)
    @@map("expense_shares")
}

model Payment extends BaseModel {
    groupId     String
    group       Group               @relation(fields: [groupId], references: [id])

    amount      Int
    currency    CurrencyCode
    conversion  CurrencyConversion? @json

    recipientId String
    recipient   Profile             @relation(name: "payment_recipient", fields: [recipientId], references: [userId])

    payerId     String
    payer       Profile             @relation(name: "payment_payer", fields: [payerId], references: [userId])

    @@allow('all', true)
    @@map("payments")
}

model ExchangeRates extends BaseModel {
    baseCurrency String @db.VarChar(3)
    rates        Json

    @@allow('all', true)
    @@map("exchange_rates")
}