model Profile {
    userId    String             @id()
    email     String
    firstName String
    lastName  String
    groups    GroupParticipant[]
    avatarId  String?
    avatar    Image?             @relation(fields: [avatarId], references: [id])
    messages  Message[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("profiles")
    @@schema("public")
}

model Group {
    id           String             @id @default(uuid())
    name         String
    currency     Currency
    participants GroupParticipant[]
    coverImageId String?
    coverImage   Image?             @relation(fields: [coverImageId], references: [id])
    messages     Message[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("groups")
    @@schema("public")
}

model GroupParticipant {
    id      String  @id @default(uuid())
    userId  String
    user    Profile @relation(fields: [userId], references: [userId])
    groupId String
    group   Group   @relation(fields: [groupId], references: [id])
    role    Role

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@index([groupId])
    @@index([userId])
    @@map("group_participants")
    @@schema("public")
}

model Image {
    id           String  @id @default(uuid())
    path         String
    bucket       String
    uploadedById String
    blurhash     String?

    Group   Group[]
    Profile Profile[]

    updatedAt DateTime @default(now()) @updatedAt
    createdAt DateTime @default(now())

    @@map("images")
    @@schema("public")
}

model Message {
    id   String  @id @default(uuid())
    text String?

    authorType AuthorType
    authorId   String?
    author     Profile?   @relation(fields: [authorId], references: [userId])

    groupId String
    group   Group  @relation(fields: [groupId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("messages")
    @@schema("public")
}

enum Role {
    Owner
    Admin
    Member

    @@schema("public")
}

enum Currency {
    USD
    EUR

    @@schema("public")
}

enum AuthorType {
    User
    System

    @@schema("public")
}
